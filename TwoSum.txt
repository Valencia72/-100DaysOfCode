//Brute force approach
class Solution {
    public int[] twoSum(int[] nums, int target) {
        int[] res = new int[2];
        int n = nums.length;
        for (int i = 0; i < n; i++) {
            for (int j = 1; j < n; j++) {
                if (nums[i] + nums[j] == target && i != j) {
                    res[0] = i;
                    res[1] = j;
                    break;
                }
            }
        }
        return res;
    }
}
//Optimised approach using HashMap
class Solution {
    public int[] twoSum(int[] nums, int target) {
        //implementing the optimised version using hashmaps because it's O(1)
        HashMap<Integer,Integer> hm=new HashMap<>();
        int[] res=new int[2];
        for(int i=0;i<nums.length;i++){
            int complement=target-nums[i];
            if(hm.containsKey(complement)){
                return new int[] {hm.get(complement),i};
            }
            hm.put(nums[i],i);
        }
        return res;
    }
}